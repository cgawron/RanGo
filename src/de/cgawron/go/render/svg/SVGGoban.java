/*
 * Copyright (C) 2011 Christian Gawron
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.cgawron.go.render.svg;

import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.logging.Logger;

import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.batik.svggen.SVGGeneratorContext;

import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;

import de.cgawron.go.Goban;
import de.cgawron.go.Goban.BoardType;
import de.cgawron.go.render.GobanRenderer;
import de.cgawron.go.render.SimpleGobanRenderer;
import de.cgawron.go.sgf.MarkupModel;
import de.cgawron.go.sgf.SimpleMarkupModel;

public class SVGGoban
{
    private static Logger logger = Logger.getLogger(SVGGoban.class.getName());
    private GobanRenderer renderer = new SimpleGobanRenderer();

    private Graphics2D scaleGraphics(Graphics2D g, Goban model)
    {
        if (g == null)
            return null;

        RenderingHints hints = new RenderingHints(null);
        hints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.addRenderingHints(hints);

        double min = 400;
        int boardSize = model.getBoardSize();

        g.scale(min / boardSize, min / boardSize);

        logger.info("scaleGraphics: " + min + ", " + boardSize);
        g.setStroke(new BasicStroke(0.02f));

        return g;
    }

    public void paint(Graphics2D g2d)
    {
        MarkupModel model = new SimpleMarkupModel((short)19);
        model.move((short)3, (short)3, BoardType.BLACK);
        model.setMarkup((short)3, (short)3, new MarkupModel.Move(BoardType.BLACK, 9));
        renderer.paint(scaleGraphics(g2d, model), model);
    }

    public static void main(String[] args) throws IOException
    {

        // Get a DOMImplementation
        DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();

        // Create an instance of org.w3c.dom.Document
        Document document = domImpl.createDocument(null, "svg", null);

        // Create an instance of the SVG Generator
	SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);
	ctx.setComment("Generated by FooApplication with Batik SVG Generator");
	SVGGraphics2D svgGenerator = new SVGGraphics2D(ctx, false);
	
        // Ask the test to render into the SVG Graphics2D implementation
        SVGGoban test = new SVGGoban();
        test.paint(svgGenerator);

        // Finally, stream out SVG to the standard output using UTF-8
        // character to byte encoding
        boolean useCSS = true; // we want to use CSS style attribute
        Writer out = new OutputStreamWriter(System.out, "UTF-8");
        svgGenerator.stream(out, useCSS);
    }
}
